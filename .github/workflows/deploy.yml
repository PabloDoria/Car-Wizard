name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: default

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Cleanup Existing Workspaces
        run: |
          # Listar todos los workspaces
          for workspace in $(terraform workspace list); do
            if [ "$workspace" != "default" ]; then
              echo "Eliminando workspace: $workspace"
              terraform workspace select $workspace
              terraform workspace delete $workspace
            fi
          done
          # Seleccionar workspace default
          terraform workspace select default || terraform workspace new default

      - name: Terraform Init
        run: terraform init

      - name: Check Existing Resources
        run: |
          # Verificar VPC existente
          if aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text 2>/dev/null; then
            echo "VPC ya existe, omitiendo creación..."
            export SKIP_VPC=true
          fi
          
          # Verificar recursos existentes
          if aws iam get-role --role-name car-wizard-ecs-task-role 2>/dev/null; then
            echo "IAM Role ya existe, omitiendo creación..."
            export SKIP_IAM_ROLE=true
          fi
          
          if aws secretsmanager describe-secret --secret-id car-wizard/db-credentials 2>/dev/null; then
            echo "Secrets Manager Secret ya existe, omitiendo creación..."
            export SKIP_SECRET=true
          fi
          
          if aws rds describe-db-subnet-groups --db-subnet-group-name car-wizard-rds-subnet-group 2>/dev/null; then
            echo "RDS Subnet Group ya existe, omitiendo creación..."
            export SKIP_RDS_SUBNET=true
          fi

      - name: Terraform Plan
        run: |
          # Crear plan sin los recursos que ya existen
          if [ -n "$SKIP_VPC" ]; then
            terraform plan -out=tfplan -target="!aws_vpc.vpc"
          elif [ -n "$SKIP_IAM_ROLE" ]; then
            terraform plan -out=tfplan -target="!aws_iam_role.ecs_task_role"
          elif [ -n "$SKIP_SECRET" ]; then
            terraform plan -out=tfplan -target="!aws_secretsmanager_secret.db_credentials"
          elif [ -n "$SKIP_RDS_SUBNET" ]; then
            terraform plan -out=tfplan -target="!aws_db_subnet_group.rds_subnet_group"
          else
            terraform plan -out=tfplan
          fi

      - name: Terraform Apply
        run: |
          # Aplicar el plan
          terraform apply -auto-approve tfplan

      - name: Verify Resources
        run: |
          echo "🔍 Verificando recursos creados..."
          
          # Verificar VPC
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "✅ VPC: $VPC_ID"
          
          # Verificar Subnets
          SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)
          echo "✅ Subnets: $SUBNETS"
          
          # Verificar Security Groups
          SGS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[*].GroupId" --output text)
          echo "✅ Security Groups: $SGS"
          
          # Verificar RDS
          RDS_ID=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='car-wizard-db'].DBInstanceIdentifier" --output text)
          echo "✅ RDS: $RDS_ID"
          
          # Verificar Lambda
          LAMBDA=$(aws lambda get-function --function-name LoadDataLambda --query "Configuration.FunctionName" --output text)
          echo "✅ Lambda: $LAMBDA"

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Get RDS Endpoint
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier car-wizard-db --query "DBInstances[0].Endpoint.Address" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get ALB DNS
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query "LoadBalancers[0].DNSName" --output text)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Configure Laravel with Ansible
        run: |
          cd ansible
          # Crear inventario local
          cat > inventory.ini << EOL
          [local]
          localhost ansible_connection=local
          EOL
          
          # Crear php.ini.j2 en la ubicación correcta
          mkdir -p roles/docker/templates
          cat > roles/docker/templates/php.ini.j2 << EOL
          [PHP]
          memory_limit = 256M
          upload_max_filesize = 64M
          post_max_size = 64M
          max_execution_time = 300
          EOL
          
          # Verificar que el archivo se creó
          if [ ! -f roles/docker/templates/php.ini.j2 ]; then
            echo "Error: No se pudo crear php.ini.j2"
            exit 1
          fi
          
          # Ejecutar playbook con inventario explícito
          ansible-playbook -i inventory.ini playbooks/laravel.yml

  verify-lambda:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Verify Lambda Function
        run: |
          aws lambda get-function --function-name LoadDataLambda
          aws lambda invoke --function-name LoadDataLambda response.json
          cat response.json
