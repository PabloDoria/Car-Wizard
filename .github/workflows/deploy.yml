name: Deploy Infrastructure & Laravel App

on:
  workflow_dispatch:  # Solo permite ejecuci칩n manual desde GitHub

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: car-wizard
  ECS_CLUSTER: car-wizard-cluster
  ECS_SERVICE: car-wizard-service
  ECS_TASK_DEFINITION: ecs/task-definition.json
  LAMBDA_FUNCTION_NAME: LoadDataLambda
  TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Get IAM User Credentials
        if: success()
        run: |
          echo "游댏 Credenciales de acceso para los usuarios:"
          echo "----------------------------------------"
          for USER in "anad" "angelg" "luism"; do
            echo "Usuario: car-wizard-$USER"
            # Crear nuevo perfil de login y obtener la contrase침a
            PASSWORD=$(aws iam create-login-profile --user-name "car-wizard-$USER" --password-reset-required --generate-cli-skeleton output | jq -r '.Password')
            echo "Contrase침a temporal: $PASSWORD"
            echo "URL de acceso: https://console.aws.amazon.com"
            echo "----------------------------------------"
          done
        continue-on-error: true

      - name: Save Credentials to Job Summary
        if: success()
        run: |
          echo "### 游댏 Credenciales de acceso AWS" >> $GITHUB_STEP_SUMMARY
          echo "Los usuarios pueden acceder a la consola de AWS en: https://console.aws.amazon.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Usuario | Contrase침a |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------------|" >> $GITHUB_STEP_SUMMARY
          for USER in "anad" "angelg" "luism"; do
            PASSWORD=$(aws iam get-login-profile --user-name "car-wizard-$USER" --query 'LoginProfile.CreateDate' --output text 2>/dev/null || echo "Contrase침a pendiente de generar")
            echo "| car-wizard-$USER | $PASSWORD |" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "丘멆잺 **Importante**: Los usuarios deber치n cambiar su contrase침a en el primer inicio de sesi칩n" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy Laravel to ECS
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Get RDS Endpoint
        run: |
          DB_HOST=$(aws rds describe-db-instances --db-instance-identifier car-wizard-db --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

      - name: Configure Laravel with Ansible
        env:
          DB_NAME: ${{ env.TF_VAR_rds_db_name }}
          DB_USER: admin
          DB_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          APP_URL: ${{ env.ALB_DNS }}
        run: |
          cd ansible
          ansible-playbook playbooks/configure-laravel.yml

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS Task Definition
        run: |
          sed -i 's|<IMAGE>|'"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"'|g' $ECS_TASK_DEFINITION

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          wait-for-service-stability: true

  notify:
    name: Notify on Failure
    needs: [terraform, deploy]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Send failure notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"游뚿 *Deploy Failed!*"}' $SLACK_WEBHOOK_URL
