name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: default

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Cleanup and Setup Workspace
        run: |
          # Limpiar todos los workspaces excepto default
          for workspace in $(terraform workspace list); do
            if [ "$workspace" != "default" ]; then
              echo "Eliminando workspace: $workspace"
              terraform workspace select $workspace
              terraform workspace delete $workspace
            fi
          done
          
          # Asegurarse de usar el workspace default
          terraform workspace select default || terraform workspace new default

      - name: Terraform Init
        run: terraform init

      - name: Cleanup Existing VPCs
        run: |
          # Obtener todas las VPCs con el tag Name=Car-Wizard-VPC
          VPC_IDS=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[*].VpcId" --output text)
          
          if [ -n "$VPC_IDS" ]; then
            echo "Encontradas VPCs existentes: $VPC_IDS"
            
            # Eliminar todas las VPCs existentes
            for vpc_id in $VPC_IDS; do
              echo "Eliminando VPC: $vpc_id"
              
              # Obtener y eliminar subnets
              SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$vpc_id" --query "Subnets[*].SubnetId" --output text)
              for subnet_id in $SUBNET_IDS; do
                echo "Eliminando subnet: $subnet_id"
                aws ec2 delete-subnet --subnet-id $subnet_id
              done
              
              # Obtener y eliminar security groups
              SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$vpc_id" --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
              for sg_id in $SG_IDS; do
                echo "Eliminando security group: $sg_id"
                aws ec2 delete-security-group --group-id $sg_id
              done
              
              # Obtener y eliminar NAT Gateways
              NAT_IDS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$vpc_id" --query "NatGateways[*].NatGatewayId" --output text)
              for nat_id in $NAT_IDS; do
                echo "Eliminando NAT Gateway: $nat_id"
                aws ec2 delete-nat-gateway --nat-gateway-id $nat_id
              done
              
              # Obtener y eliminar Internet Gateways
              IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$vpc_id" --query "InternetGateways[*].InternetGatewayId" --output text)
              for igw_id in $IGW_IDS; do
                echo "Eliminando Internet Gateway: $igw_id"
                aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id
                aws ec2 delete-internet-gateway --internet-gateway-id $igw_id
              done
              
              # Eliminar la VPC
              aws ec2 delete-vpc --vpc-id $vpc_id
            done
          else
            echo "No se encontraron VPCs existentes"
          fi

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Verify Resources
        run: |
          echo "🔍 Verificando recursos creados..."
          
          # Verificar VPC
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "✅ VPC: $VPC_ID"
          
          # Verificar Subnets
          SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[*].SubnetId" --output text)
          echo "✅ Subnets: $SUBNETS"
          
          # Verificar Security Groups
          SGS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[*].GroupId" --output text)
          echo "✅ Security Groups: $SGS"
          
          # Verificar RDS
          RDS_ID=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='car-wizard-db'].DBInstanceIdentifier" --output text)
          echo "✅ RDS: $RDS_ID"
          
          # Verificar Lambda
          LAMBDA=$(aws lambda get-function --function-name LoadDataLambda --query "Configuration.FunctionName" --output text)
          echo "✅ Lambda: $LAMBDA"

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Get RDS Endpoint
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier car-wizard-db --query "DBInstances[0].Endpoint.Address" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get ALB DNS
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query "LoadBalancers[0].DNSName" --output text)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Configure Laravel with Ansible
        run: |
          cd ansible
          
          # Crear estructura de directorios necesaria
          mkdir -p roles/docker/templates
          
          # Crear php.ini.j2 en la ubicación correcta
          cat > roles/docker/templates/php.ini.j2 << EOL
          [PHP]
          memory_limit = 256M
          upload_max_filesize = 64M
          post_max_size = 64M
          max_execution_time = 300
          EOL
          
          # Crear Dockerfile.j2 si no existe
          if [ ! -f roles/docker/templates/Dockerfile.j2 ]; then
            cat > roles/docker/templates/Dockerfile.j2 << EOL
          FROM php:8.1-fpm
          
          # Instalar dependencias
          RUN apt-get update && apt-get install -y \
              git \
              curl \
              libpng-dev \
              libonig-dev \
              libxml2-dev \
              zip \
              unzip
          
          # Limpiar cache
          RUN apt-get clean && rm -rf /var/lib/apt/lists/*
          
          # Instalar extensiones PHP
          RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd
          
          # Obtener composer
          COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
          
          # Establecer directorio de trabajo
          WORKDIR /var/www
          
          # Copiar archivos de la aplicación
          COPY . /var/www
          
          # Instalar dependencias
          RUN composer install --no-dev --optimize-autoloader
          
          # Configurar permisos
          RUN chown -R www-data:www-data /var/www/storage
          RUN chmod -R 775 /var/www/storage
          
          # Exponer puerto
          EXPOSE 9000
          
          # Comando para iniciar PHP-FPM
          CMD ["php-fpm"]
          EOL
          fi
          
          # Verificar que los archivos se crearon
          if [ ! -f roles/docker/templates/php.ini.j2 ] || [ ! -f roles/docker/templates/Dockerfile.j2 ]; then
            echo "Error: No se pudieron crear los archivos de plantilla"
            exit 1
          fi
          
          # Crear inventario local
          cat > inventory.ini << EOL
          [local]
          localhost ansible_connection=local
          EOL
          
          # Ejecutar playbook con inventario explícito
          ansible-playbook -i inventory.ini playbooks/configure-laravel.yml

  verify-lambda:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=Car-Wizard-VPC" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Verify Lambda Function
        run: |
          aws lambda get-function --function-name LoadDataLambda
          aws lambda invoke --function-name LoadDataLambda response.json
          cat response.json
