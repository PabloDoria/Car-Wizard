name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: default

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Terraform Init
        run: terraform init

      - name: Select Default Workspace
        run: |
          terraform workspace select default || terraform workspace new default

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          # Aplicar solo los recursos que no existen
          terraform apply -auto-approve -target=aws_vpc.vpc
          terraform apply -auto-approve -target=aws_subnet.subnet_1 -target=aws_subnet.subnet_2
          terraform apply -auto-approve -target=aws_security_group.alb_sg -target=aws_security_group.ecs_tasks_sg
          terraform apply -auto-approve -target=aws_ecs_cluster.ecs_cluster
          terraform apply -auto-approve -target=aws_ecr_repository.ecr_repo
          terraform apply -auto-approve -target=aws_lb_target_group.alb_target
          terraform apply -auto-approve -target=aws_db_parameter_group.mysql_parameters
          terraform apply -auto-approve -target=aws_cloudwatch_log_group.lambda_logs
          terraform apply -auto-approve -target=aws_cloudwatch_event_rule.daily_lambda_trigger

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Project,Values=car-wizard" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Get RDS Endpoint
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier car-wizard-db --query "DBInstances[0].Endpoint.Address" --output text)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get ALB DNS
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query "LoadBalancers[0].DNSName" --output text)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Configure Laravel with Ansible
        run: |
          cd ansible
          # Crear php.ini.j2 si no existe
          if [ ! -f roles/docker/templates/php.ini.j2 ]; then
            mkdir -p roles/docker/templates
            cat > roles/docker/templates/php.ini.j2 << EOL
            [PHP]
            memory_limit = 256M
            upload_max_filesize = 64M
            post_max_size = 64M
            max_execution_time = 300
            EOL
          fi
          ansible-playbook -i localhost, playbooks/laravel.yml

  verify-lambda:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC ID
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Project,Values=car-wizard" --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      - name: Verify Lambda Function
        run: |
          aws lambda get-function --function-name LoadDataLambda
          aws lambda invoke --function-name LoadDataLambda response.json
          cat response.json
