name: Destroy Infrastructure

on:
  workflow_dispatch:  # Permite ejecución manual desde GitHub

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}

jobs:
  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Force Delete ECS Resources
        run: |
          echo "Eliminando servicios ECS..."
          CLUSTER_NAME="car-wizard-cluster"
          SERVICE_NAME="car-wizard-service"
          
          # Escalar el servicio a 0
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0 || true
          
          # Esperar a que los tasks se detengan (máximo 5 minutos)
          timeout=300
          while [ $timeout -gt 0 ]; do
            TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns' --output text)
            if [ -z "$TASKS" ] || [ "$TASKS" == "None" ]; then
              break
            fi
            echo "Esperando que los tasks se detengan... ($timeout segundos restantes)"
            sleep 10
            timeout=$((timeout-10))
          done
          
          # Forzar eliminación de tareas restantes
          TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns[]' --output text) || true
          if [ ! -z "$TASKS" ] && [ "$TASKS" != "None" ]; then
            echo "Forzando eliminación de tareas..."
            for TASK in $TASKS; do
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK --reason "Destroy infrastructure" || true
            done
          fi
          
          # Eliminar el servicio
          echo "Eliminando servicio ECS..."
          aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force || true
          
          # Eliminar el cluster
          echo "Eliminando cluster ECS..."
          aws ecs delete-cluster --cluster $CLUSTER_NAME || true

      - name: Force Delete Lambda Resources
        run: |
          echo "Eliminando recursos de Lambda..."
          # Eliminar permisos y triggers primero
          aws events remove-targets --rule trigger-car-data-update --ids TriggerLambda || true
          aws events delete-rule --name trigger-car-data-update || true
          aws lambda delete-function --function-name LoadDataLambda || true

      - name: Force Delete Load Balancer
        run: |
          echo "Eliminando Load Balancer..."
          # Obtener ARN del ALB
          ALB_ARN=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) || true
          if [ ! -z "$ALB_ARN" ] && [ "$ALB_ARN" != "None" ]; then
            # Eliminar listeners
            LISTENERS=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[*].ListenerArn' --output text) || true
            for listener in $LISTENERS; do
              aws elbv2 delete-listener --listener-arn $listener || true
            done
            # Eliminar el ALB
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN || true
          fi
          
          # Eliminar target groups
          TG_ARN=$(aws elbv2 describe-target-groups --names car-wizard-tg --query 'TargetGroups[0].TargetGroupArn' --output text) || true
          if [ ! -z "$TG_ARN" ] && [ "$TG_ARN" != "None" ]; then
            aws elbv2 delete-target-group --target-group-arn $TG_ARN || true
          fi

      - name: Clean up ECR Repository
        if: always()
        run: |
          echo "Limpiando repositorio ECR..."
          REPO_NAME="car-wizard"
          # Eliminar todas las imágenes
          aws ecr list-images --repository-name $REPO_NAME --query 'imageIds[*]' --output json | \
          jq -r '.[] | [.imageDigest] | @tsv' | \
          while read digest; do
            aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageDigest=$digest || true
          done
          
          # Eliminar el repositorio
          aws ecr delete-repository --repository-name $REPO_NAME --force || true

      - name: Terraform Destroy
        working-directory: terraform
        run: terraform destroy -auto-approve
        env:
          TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}