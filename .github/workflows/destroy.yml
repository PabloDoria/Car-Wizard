name: Destroy Infrastructure

on:
  workflow_dispatch:  # Permite ejecución manual desde GitHub

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
  VPC_NAME: "car-wizard-vpc"

jobs:
  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Force Delete ECS Resources
        run: |
          echo "Eliminando servicios ECS..."
          CLUSTER_NAME="car-wizard-cluster"
          SERVICE_NAME="car-wizard-service"
          
          # Verificar si el cluster existe
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].status' --output text 2>/dev/null || echo "INACTIVE")
          
          if [ "$CLUSTER_EXISTS" != "INACTIVE" ]; then
            echo "Cluster encontrado, procediendo con la eliminación de servicios..."
            
            # Verificar si el servicio existe
            SERVICE_EXISTS=$(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns[0]' --output text 2>/dev/null || echo "")
            
            if [ ! -z "$SERVICE_EXISTS" ] && [ "$SERVICE_EXISTS" != "None" ]; then
              echo "Servicio encontrado, procediendo con la eliminación..."
              
              # Escalar el servicio a 0
              aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0 || true
              
              # Esperar a que los tasks se detengan (máximo 5 minutos)
              timeout=300
              while [ $timeout -gt 0 ]; do
                TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns' --output text)
                if [ -z "$TASKS" ] || [ "$TASKS" == "None" ]; then
                  break
                fi
                echo "Esperando que los tasks se detengan... ($timeout segundos restantes)"
                sleep 10
                timeout=$((timeout-10))
              done
              
              # Forzar eliminación de tareas restantes
              TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns[]' --output text) || true
              if [ ! -z "$TASKS" ] && [ "$TASKS" != "None" ]; then
                echo "Forzando eliminación de tareas..."
                for TASK in $TASKS; do
                  aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK --reason "Destroy infrastructure" || true
                done
              fi
              
              # Eliminar el servicio
              echo "Eliminando servicio ECS..."
              aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force || true
            else
              echo "No se encontró el servicio ECS, continuando..."
            fi
            
            # Eliminar el cluster
            echo "Eliminando cluster ECS..."
            aws ecs delete-cluster --cluster $CLUSTER_NAME || true
          else
            echo "No se encontró el cluster ECS, continuando..."
          fi

      - name: Force Delete Lambda Resources
        run: |
          echo "Eliminando recursos de Lambda..."
          
          # 1. Eliminar permisos y triggers primero
          aws events remove-targets --rule trigger-car-data-update --ids TriggerLambda || true
          aws events delete-rule --name trigger-car-data-update || true
          
          # 2. Eliminar la función Lambda
          FUNCTION_NAME="LoadDataLambda"
          echo "Eliminando función Lambda $FUNCTION_NAME..."
          aws lambda delete-function --function-name $FUNCTION_NAME || true
          
          # Obtener VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${VPC_NAME}" --query 'Vpcs[0].VpcId' --output text)
          
          # 3. Forzar la eliminación de las ENIs asociadas con Lambda
          echo "Buscando y eliminando ENIs de Lambda..."
          
          # Identificar todas las ENIs asociadas a Lambda
          LAMBDA_ENIS=$(aws ec2 describe-network-interfaces --filters "Name=description,Values=*Lambda*" "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
          
          if [ ! -z "$LAMBDA_ENIS" ] && [ "$LAMBDA_ENIS" != "None" ]; then
            echo "Se encontraron ENIs de Lambda: $LAMBDA_ENIS"
            
            for ENI in $LAMBDA_ENIS; do
              echo "Procesando ENI $ENI..."
              
              # Obtener información de la ENI
              ATTACHMENT=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text || echo "")
              
              if [ ! -z "$ATTACHMENT" ] && [ "$ATTACHMENT" != "None" ]; then
                echo "Intentando desconectar ENI mediante su attachment ID $ATTACHMENT..."
                aws ec2 detach-network-interface --attachment-id $ATTACHMENT --force || true
                sleep 5
              fi
              
              # En algunos casos la ENI no se puede eliminar con el comando normal, intentamos usar force-detach-network-interface
              # (Este comando no existe realmente en la AWS CLI, pero ilustra lo que hacemos con los siguientes pasos)
              
              # Identificar el Requester ID de la ENI (generalmente el ARN del Lambda)
              REQUESTER_ID=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].RequesterId' --output text || echo "")
              echo "Requester ID de la ENI: $REQUESTER_ID"
              
              # Agregar tag para marcarla como lista para eliminación (para identificarla después)
              aws ec2 create-tags --resources $ENI --tags Key=Name,Value=delete-me || true
              
              # Intentar eliminar la ENI directamente (puede fallar)
              aws ec2 delete-network-interface --network-interface-id $ENI || true
            done
          else 
            echo "No se encontraron ENIs de Lambda"
          fi
          
          # 4. Esperar 60 segundos para dar tiempo a AWS a limpiar recursos
          echo "Esperando 60 segundos para que AWS limpie los recursos de Lambda..."
          sleep 60
          
          # 5. Segundo intento para eliminar ENIs que no se pudieron eliminar
          REMAINING_ENIS=$(aws ec2 describe-network-interfaces --filters "Name=description,Values=*Lambda*" "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
          
          if [ ! -z "$REMAINING_ENIS" ] && [ "$REMAINING_ENIS" != "None" ]; then
            echo "⚠️ Aún quedan ENIs de Lambda: $REMAINING_ENIS"
            echo "Intentando un método alternativo de eliminación..."
            
            for ENI in $REMAINING_ENIS; do
              echo "Último intento de eliminar ENI $ENI..."
              
              # Último recurso: intentar con AWS CLI modificando su estado
              # Esto es peligroso y debería usarse con precaución
              ATTACHMENT=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text || echo "")
              
              if [ ! -z "$ATTACHMENT" ] && [ "$ATTACHMENT" != "None" ]; then
                echo "Detectado attachment $ATTACHMENT, forzando desconexión con flag force..."
                # Usar --force para forzar el detach incluso si está en uso
                aws ec2 detach-network-interface --attachment-id $ATTACHMENT --force || true
                sleep 10
              fi
              
              # Usar una estrategia de reintento para eliminar la ENI
              for i in {1..5}; do
                echo "Intento $i de 5 para eliminar ENI $ENI..."
                aws ec2 delete-network-interface --network-interface-id $ENI && break || sleep 10
              done
            done
            
            echo "Esperando otros 60 segundos para completar la limpieza..."
            sleep 60
          else
            echo "✅ Todas las ENIs de Lambda se eliminaron correctamente"
          fi

      - name: Force Delete Load Balancer
        run: |
          echo "Eliminando Load Balancer..."
          # Obtener ARN del ALB
          ALB_ARN=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) || true
          if [ ! -z "$ALB_ARN" ] && [ "$ALB_ARN" != "None" ]; then
            # Eliminar listeners
            LISTENERS=$(aws elbv2 describe-listeners --load-balancer-arn $ALB_ARN --query 'Listeners[*].ListenerArn' --output text) || true
            for listener in $LISTENERS; do
              aws elbv2 delete-listener --listener-arn $listener || true
            done
            # Eliminar el ALB
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN || true
          fi
          
          # Eliminar target groups
          TG_ARN=$(aws elbv2 describe-target-groups --names car-wizard-tg --query 'TargetGroups[0].TargetGroupArn' --output text) || true
          if [ ! -z "$TG_ARN" ] && [ "$TG_ARN" != "None" ]; then
            aws elbv2 delete-target-group --target-group-arn $TG_ARN || true
          fi

      - name: Clean up ECR Repository
        if: always()
        run: |
          echo "Limpiando repositorio ECR..."
          REPO_NAME="car-wizard"
          aws ecr list-images --repository-name $REPO_NAME --query 'imageIds[*]' --output json | \
          jq -r '.[] | [.imageDigest] | @tsv' | \
          while read digest; do
            aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageDigest=$digest || true
          done
          aws ecr delete-repository --repository-name $REPO_NAME --force || true

      - name: Force Delete RDS Resources
        run: |
          echo "Eliminando recursos de RDS..."
          
          # Eliminar instancia RDS
          DB_IDENTIFIER="car-wizard-db"
          echo "Eliminando instancia RDS $DB_IDENTIFIER..."
          aws rds delete-db-instance --db-instance-identifier $DB_IDENTIFIER --skip-final-snapshot --delete-automated-backups || true
          
          # Esperar a que la instancia se elimine (máximo 20 minutos)
          echo "Esperando a que la instancia RDS se elimine..."
          timeout=1200
          while [ $timeout -gt 0 ]; do
            DB_STATUS=$(aws rds describe-db-instances --db-instance-identifier $DB_IDENTIFIER --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "deleted")
            if [ "$DB_STATUS" == "deleted" ] || [ "$DB_STATUS" == "None" ]; then
              echo "Instancia RDS eliminada"
              break
            fi
            echo "Estado de RDS: $DB_STATUS ($timeout segundos restantes)"
            sleep 30
            timeout=$((timeout-30))
          done
          
          # Eliminar subnet groups
          echo "Eliminando DB subnet groups..."
          aws rds delete-db-subnet-group --db-subnet-group-name car-wizard-rds-subnet-group || true
          
          # Eliminar parameter groups
          echo "Eliminando DB parameter groups..."
          aws rds delete-db-parameter-group --db-parameter-group-name $(aws rds describe-db-parameter-groups --query 'DBParameterGroups[?starts_with(DBParameterGroupName, `car-wizard-params-`)].DBParameterGroupName' --output text) || true

      - name: Force Delete Network Resources
        run: |
          echo "Eliminando recursos de red..."
          
          # Obtener VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${VPC_NAME}" --query 'Vpcs[0].VpcId' --output text)
          
          if [ ! -z "$VPC_ID" ] && [ "$VPC_ID" != "None" ]; then
            echo "Eliminando recursos asociados a VPC $VPC_ID..."

            # 1. Revisar si el Lambda fue eliminado correctamente
            echo "Verificando que el Lambda haya sido eliminado correctamente..."
            LAMBDA_STILL_EXISTS=$(aws lambda get-function --function-name "LoadDataLambda" 2>/dev/null && echo "true" || echo "false")
            
            if [ "$LAMBDA_STILL_EXISTS" == "true" ]; then
              echo "⚠️ Lambda aún existe, intentando forzar su eliminación..."
              aws lambda delete-function --function-name "LoadDataLambda" --force || true
              echo "Esperando 30 segundos después de forzar la eliminación del Lambda..."
              sleep 30
            else
              echo "✅ Lambda eliminado correctamente."
            fi

            # 2. Intentar eliminar las ENIs del Lambda nuevamente si todavía existen
            echo "Verificando si aún existen ENIs de Lambda..."
            LAMBDA_ENIS=$(aws ec2 describe-network-interfaces --filters "Name=description,Values=*Lambda*" "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
            
            if [ ! -z "$LAMBDA_ENIS" ] && [ "$LAMBDA_ENIS" != "None" ]; then
              echo "Aún existen ENIs de Lambda: $LAMBDA_ENIS"
              echo "Intentando un método más agresivo para eliminarlas..."
              
              for ENI in $LAMBDA_ENIS; do
                echo "Procesando ENI $ENI con método agresivo..."
                
                # Forzar el detach con --force
                ATTACHMENT=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text || echo "")
                if [ ! -z "$ATTACHMENT" ] && [ "$ATTACHMENT" != "None" ]; then
                  aws ec2 detach-network-interface --attachment-id $ATTACHMENT --force || true
                  echo "Esperando 20 segundos para que se complete el detach forzado..."
                  sleep 20
                fi
                
                # Intentar eliminar la ENI varias veces
                for attempt in {1..10}; do
                  echo "Intento $attempt de 10 para eliminar ENI $ENI..."
                  aws ec2 delete-network-interface --network-interface-id $ENI && echo "ENI eliminada exitosamente" && break || sleep 10
                done
              done
              
              echo "Esperando 60 segundos para asegurar que los cambios se propaguen..."
              sleep 60
            else
              echo "No se encontraron ENIs de Lambda pendientes."
            fi

            # 3. Eliminar ECS Tasks y esperar
            echo "Verificando y eliminando tareas ECS..."
            CLUSTER_NAME="car-wizard-cluster"
            aws ecs update-service --cluster $CLUSTER_NAME --service car-wizard-service --desired-count 0 || true
            sleep 30

            # 4. Eliminar ALB y esperar
            echo "Eliminando Load Balancer..."
            ALB_ARN=$(aws elbv2 describe-load-balancers --names car-wizard-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text) || true
            if [ ! -z "$ALB_ARN" ] && [ "$ALB_ARN" != "None" ]; then
              aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN || true
              echo "Esperando que el ALB se elimine..."
              while aws elbv2 describe-load-balancers --names car-wizard-alb 2>/dev/null; do
                echo "ALB aún existe, esperando..."
                sleep 30
              done
            fi

            # 5. Eliminar Target Groups
            echo "Eliminando Target Groups..."
            TG_ARN=$(aws elbv2 describe-target-groups --names car-wizard-tg --query 'TargetGroups[0].TargetGroupArn' --output text) || true
            if [ ! -z "$TG_ARN" ] && [ "$TG_ARN" != "None" ]; then
              aws elbv2 delete-target-group --target-group-arn $TG_ARN || true
            fi

            # 6. Esperar y eliminar ENIs
            echo "Esperando 60 segundos antes de proceder con ENIs..."
            sleep 60

            # 7. Eliminar ENIs con reintentos
            for attempt in {1..5}; do
              echo "Intento $attempt de eliminar Network Interfaces..."
              ENIs=$(aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text) || true
              if [ ! -z "$ENIs" ] && [ "$ENIs" != "None" ]; then
                for eni in $ENIs; do
                  echo "Procesando ENI $eni..."
                  # Obtener información del ENI
                  ATTACHMENT=$(aws ec2 describe-network-interfaces --network-interface-ids $eni --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text) || true
                  
                  if [ ! -z "$ATTACHMENT" ] && [ "$ATTACHMENT" != "None" ]; then
                    echo "Desvinculando ENI $eni..."
                    aws ec2 detach-network-interface --attachment-id $ATTACHMENT --force || true
                    sleep 10
                  fi
                  
                  echo "Eliminando ENI $eni..."
                  aws ec2 delete-network-interface --network-interface-id $eni --force || true
                done
                echo "Esperando 30 segundos antes del siguiente intento..."
                sleep 30
              else
                echo "No se encontraron ENIs para eliminar"
                break
              fi
            done

            # 8. Eliminar Security Groups
            echo "Eliminando Security Groups..."
            
            # Identificar y eliminar las referencias cruzadas entre security groups
            echo "Analizando referencias entre Security Groups..."
            
            # Obtener IDs de los security groups dinámicamente
            echo "Obteniendo IDs de los security groups..."
            LAMBDA_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=lambda-sg-*" --query 'SecurityGroups[0].GroupId' --output text) || true
            ECS_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=ecs-tasks-sg-*" --query 'SecurityGroups[0].GroupId' --output text) || true
            RDS_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=rds-sg-*" --query 'SecurityGroups[0].GroupId' --output text) || true
            ALB_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=alb-sg-*" --query 'SecurityGroups[0].GroupId' --output text) || true
            DEFAULT_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text) || true
            
            echo "Security Group IDs encontrados:"
            echo "Lambda SG: $LAMBDA_SG"
            echo "ECS SG: $ECS_SG"
            echo "RDS SG: $RDS_SG"
            echo "ALB SG: $ALB_SG"
            echo "Default SG: $DEFAULT_SG"
            
            # Primero eliminar todas las reglas de todos los grupos
            echo "Eliminando todas las reglas de todos los security groups..."
            
            # Lambda SG
            if [ ! -z "$LAMBDA_SG" ] && [ "$LAMBDA_SG" != "None" ]; then
                echo "Eliminando reglas de lambda-security-group..."
                aws ec2 revoke-security-group-ingress --group-id $LAMBDA_SG --protocol tcp --port 3306 --source-group $RDS_SG || true
                aws ec2 revoke-security-group-egress --group-id $LAMBDA_SG --protocol -1 --port -1 --cidr 0.0.0.0/0 || true
            fi
            
            # ECS Tasks SG
            if [ ! -z "$ECS_SG" ] && [ "$ECS_SG" != "None" ]; then
                echo "Eliminando reglas de ecs-tasks-security-group..."
                aws ec2 revoke-security-group-ingress --group-id $ECS_SG --protocol tcp --port 80 --source-group $ALB_SG || true
                aws ec2 revoke-security-group-egress --group-id $ECS_SG --protocol -1 --port -1 --cidr 0.0.0.0/0 || true
            fi
            
            # RDS SG
            if [ ! -z "$RDS_SG" ] && [ "$RDS_SG" != "None" ]; then
                echo "Eliminando reglas de rds-security-group..."
                aws ec2 revoke-security-group-ingress --group-id $RDS_SG --protocol tcp --port 3306 --source-group $ECS_SG || true
            fi
            
            # ALB SG
            if [ ! -z "$ALB_SG" ] && [ "$ALB_SG" != "None" ]; then
                echo "Eliminando reglas de alb-security-group..."
                aws ec2 revoke-security-group-ingress --group-id $ALB_SG --protocol tcp --port 80 --cidr 0.0.0.0/0 || true
                aws ec2 revoke-security-group-ingress --group-id $ALB_SG --protocol tcp --port 443 --cidr 0.0.0.0/0 || true
                aws ec2 revoke-security-group-egress --group-id $ALB_SG --protocol -1 --port -1 --cidr 0.0.0.0/0 || true
            fi
            
            echo "Esperando 30 segundos después de eliminar las reglas..."
            sleep 30
            
            # Intentar eliminar los security groups en orden
            echo "Eliminando security groups en orden específico..."
            
            # 1. Primero lambda-security-group
            if [ ! -z "$LAMBDA_SG" ] && [ "$LAMBDA_SG" != "None" ]; then
                echo "Eliminando lambda-security-group..."
                aws ec2 delete-security-group --group-id $LAMBDA_SG || true
                sleep 5
            fi
            
            # 2. Luego ecs-tasks-security-group
            if [ ! -z "$ECS_SG" ] && [ "$ECS_SG" != "None" ]; then
                echo "Eliminando ecs-tasks-security-group..."
                aws ec2 delete-security-group --group-id $ECS_SG || true
                sleep 5
            fi
            
            # 3. Después rds-security-group
            if [ ! -z "$RDS_SG" ] && [ "$RDS_SG" != "None" ]; then
                echo "Eliminando rds-security-group..."
                aws ec2 delete-security-group --group-id $RDS_SG || true
                sleep 5
            fi
            
            # 4. Finalmente alb-security-group
            if [ ! -z "$ALB_SG" ] && [ "$ALB_SG" != "None" ]; then
                echo "Eliminando alb-security-group..."
                aws ec2 delete-security-group --group-id $ALB_SG || true
                sleep 5
            fi
            
            # 5. Limpiar el security group default
            if [ ! -z "$DEFAULT_SG" ] && [ "$DEFAULT_SG" != "None" ]; then
                echo "Limpiando security group default..."
                aws ec2 delete-security-group --group-id $DEFAULT_SG || true
            fi

            # Verificar si quedan security groups
            echo "Verificando security groups restantes..."
            aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" || true

            # 9. Eliminar Route Tables
            echo "Eliminando Route Tables..."
            ROUTE_TABLES=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text) || true
            for rt in $ROUTE_TABLES; do
              ASSOC_IDS=$(aws ec2 describe-route-tables --route-table-ids $rt --query 'RouteTables[*].Associations[*].RouteTableAssociationId' --output text) || true
              for assoc in $ASSOC_IDS; do
                aws ec2 disassociate-route-table --association-id $assoc || true
              done
              aws ec2 delete-route-table --route-table-id $rt || true
            done

            # 10. Eliminar Internet Gateway
            echo "Eliminando Internet Gateway..."
            IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[*].InternetGatewayId' --output text) || true
            if [ ! -z "$IGW_ID" ] && [ "$IGW_ID" != "None" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID || true
              sleep 15
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID || true
            fi

            # 11. Eliminar Subnets
            echo "Eliminando Subnets..."
            for attempt in {1..3}; do
              SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text) || true
              if [ ! -z "$SUBNETS" ] && [ "$SUBNETS" != "None" ]; then
                for subnet in $SUBNETS; do
                  aws ec2 delete-subnet --subnet-id $subnet || true
                done
                sleep 30
              else
                break
              fi
            done

            # 12. Esperar y verificar recursos restantes
            echo "Esperando 60 segundos antes de eliminar la VPC..."
            sleep 60

            # 13. Verificar y mostrar recursos restantes
            echo "Verificando recursos restantes en la VPC..."
            aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" || true
            aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" || true
            aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" || true

            # 14. Intentar eliminar la VPC
            echo "Intentando eliminar la VPC..."
            aws ec2 delete-vpc --vpc-id $VPC_ID || true

            # 15. Verificar si la VPC se eliminó
            if aws ec2 describe-vpcs --vpc-ids $VPC_ID 2>/dev/null; then
              echo "⚠️ La VPC no se pudo eliminar. Recursos restantes:"
              aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" || true
              aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" || true
              aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" || true
              exit 1
            else
              echo "✅ VPC eliminada exitosamente"
            fi
          fi

      - name: Force Delete IAM Resources
        run: |
          echo "Eliminando recursos de IAM..."
          
          # 1. Eliminar usuarios del grupo
          GROUP_NAME="car-wizard-viewers"
          for USER in "car-wizard-luism" "car-wizard-anad" "car-wizard-angelg"; do
            echo "Removiendo usuario $USER del grupo $GROUP_NAME..."
            aws iam remove-user-from-group --group-name $GROUP_NAME --user-name $USER || true
          done
          
          # 2. Eliminar políticas asociadas a usuarios
          for USER in "car-wizard-luism" "car-wizard-anad" "car-wizard-angelg"; do
            echo "Procesando políticas del usuario $USER..."
            
            # Desasociar políticas administradas
            ATTACHED_POLICIES=$(aws iam list-attached-user-policies --user-name $USER --query 'AttachedPolicies[*].PolicyArn' --output text) || true
            for POLICY_ARN in $ATTACHED_POLICIES; do
              echo "Desvinculando política $POLICY_ARN del usuario $USER"
              aws iam detach-user-policy --user-name $USER --policy-arn $POLICY_ARN || true
            done
            
            # Eliminar políticas inline
            INLINE_POLICIES=$(aws iam list-user-policies --user-name $USER --query 'PolicyNames[*]' --output text) || true
            for POLICY in $INLINE_POLICIES; do
              echo "Eliminando política inline $POLICY del usuario $USER"
              aws iam delete-user-policy --user-name $USER --policy-name $POLICY || true
            done
            
            # Eliminar el usuario
            echo "Eliminando usuario $USER"
            aws iam delete-user --user-name $USER || true
          done
          
          # 3. Eliminar políticas del grupo
          echo "Eliminando políticas del grupo $GROUP_NAME..."
          # Desasociar políticas administradas del grupo
          ATTACHED_GROUP_POLICIES=$(aws iam list-attached-group-policies --group-name $GROUP_NAME --query 'AttachedPolicies[*].PolicyArn' --output text) || true
          for POLICY_ARN in $ATTACHED_GROUP_POLICIES; do
            echo "Desvinculando política $POLICY_ARN del grupo"
            aws iam detach-group-policy --group-name $GROUP_NAME --policy-arn $POLICY_ARN || true
          done
          
          # 4. Eliminar el grupo
          echo "Eliminando grupo $GROUP_NAME"
          aws iam delete-group --group-name $GROUP_NAME || true
          
          # 5. Eliminar la política CarWizardViewAccess
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`CarWizardViewAccess`].Arn' --output text) || true
          if [ ! -z "$POLICY_ARN" ] && [ "$POLICY_ARN" != "None" ]; then
            echo "Eliminando política CarWizardViewAccess"
            aws iam delete-policy --policy-arn $POLICY_ARN || true
          fi

      - name: Force Delete Service Roles
        run: |
          echo "Eliminando roles de servicio..."
          
          # Lista de roles de servicio (excluyendo GHActionsRole)
          SERVICE_ROLES=(
            "LambdaExecutionRole"
            "ecsTaskExecutionRole"
          )
          
          for ROLE_NAME in "${SERVICE_ROLES[@]}"; do
            echo "Procesando rol: $ROLE_NAME"
            
            # Obtener y eliminar políticas inline
            INLINE_POLICIES=$(aws iam list-role-policies --role-name $ROLE_NAME --query 'PolicyNames[*]' --output text) || true
            for POLICY in $INLINE_POLICIES; do
              echo "Eliminando política inline $POLICY del rol $ROLE_NAME"
              aws iam delete-role-policy --role-name $ROLE_NAME --policy-name $POLICY || true
            done
            
            # Desasociar políticas administradas
            ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name $ROLE_NAME --query 'AttachedPolicies[*].PolicyArn' --output text) || true
            for POLICY_ARN in $ATTACHED_POLICIES; do
              echo "Desvinculando política $POLICY_ARN del rol $ROLE_NAME"
              aws iam detach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY_ARN || true
            done
            
            # Eliminar el rol
            echo "Eliminando rol $ROLE_NAME"
            aws iam delete-role --role-name $ROLE_NAME || true
          done

      - name: Force Delete CloudWatch Logs
        run: |
          echo "Eliminando grupos de logs de CloudWatch..."
          
          # Eliminar grupo de logs de Lambda
          aws logs delete-log-group --log-group-name "/aws/lambda/LoadDataLambda" || true
          
          # Eliminar grupos de logs de ECS
          LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/ecs/car-wizard-" --query 'logGroups[*].logGroupName' --output text) || true
          for log_group in $LOG_GROUPS; do
            echo "Eliminando grupo de logs $log_group..."
            aws logs delete-log-group --log-group-name "$log_group" || true
          done

      - name: Force Delete CloudWatch Dashboard
        run: |
          echo "Eliminando dashboard de CloudWatch..."
          aws cloudwatch delete-dashboards --dashboard-names "car-wizard-dashboard" || true

      - name: Force Delete Application Manager & Resource Groups
        run: |
          echo "Eliminando configuración de Application Manager y Resource Groups..."
          
          # 1. Eliminar documento SSM de configuración de la aplicación
          echo "Eliminando documento SSM..."
          aws ssm delete-document --name "car-wizard-app-config" || true
          
          # 2. Eliminar Resource Group usando ARN completo
          echo "Buscando Resource Group por nombre..."
          RESOURCE_GROUP_ARN=$(aws resource-groups list-groups --query "GroupIdentifiers[?Name=='car-wizard-resources'].GroupArn" --output text)
          
          if [ ! -z "$RESOURCE_GROUP_ARN" ] && [ "$RESOURCE_GROUP_ARN" != "None" ]; then
            echo "Resource Group encontrado: $RESOURCE_GROUP_ARN"
            echo "Eliminando Resource Group con API directa..."
            aws resource-groups delete-group --group-name "car-wizard-resources" --force || true
            
            # Verificar si el grupo sigue existiendo
            echo "Esperando 5 segundos..."
            sleep 5
            
            GROUP_STILL_EXISTS=$(aws resource-groups list-groups --query "GroupIdentifiers[?Name=='car-wizard-resources'].GroupArn" --output text)
            if [ ! -z "$GROUP_STILL_EXISTS" ] && [ "$GROUP_STILL_EXISTS" != "None" ]; then
              echo "⚠️ El Resource Group aún existe, intentando un método alternativo..."
              
              # Intentar con la API de resource-groups-tagging
              echo "Intentando eliminar etiquetas del grupo..."
              aws resource-groups-tagging api untag-resources --resource-arn-list "$RESOURCE_GROUP_ARN" --tag-keys "Application" "Project" "Environment" "ManagedBy" || true
              
              # Intentar otra vez eliminar el grupo
              echo "Intentando eliminar el grupo nuevamente..."
              aws resource-groups delete-group --group-name "car-wizard-resources" --force || true
              
              # Intentar con CLI directo (último recurso)
              echo "Intentando método alternativo con AWS CLI..."
              aws resource-groups delete-group --group="car-wizard-resources" --force || true
            fi
          else
            echo "No se encontró el Resource Group 'car-wizard-resources'"
          fi
          
          # 3. Verificación final después de varios reintentos
          for i in {1..3}; do
            echo "Verificación $i de 3: Comprobando si el Resource Group aún existe..."
            FINAL_CHECK=$(aws resource-groups list-groups --query "GroupIdentifiers[?Name=='car-wizard-resources'].GroupArn" --output text)
            
            if [ -z "$FINAL_CHECK" ] || [ "$FINAL_CHECK" == "None" ]; then
              echo "✅ Resource Group eliminado con éxito"
              break
            else
              echo "⚠️ El Resource Group aún existe, reintentando eliminación (intento $i)..."
              aws resource-groups delete-group --group-name "car-wizard-resources" --force || true
              echo "Esperando 10 segundos..."
              sleep 10
            fi
          done
          
          # 4. Verificar dashboard de CloudWatch
          echo "Eliminando dashboard de CloudWatch..."
          aws cloudwatch delete-dashboards --dashboard-names "car-wizard-dashboard" || true
          
          # 5. Opcional: Verificar si hay grupos de resource-groups residuales
          echo "Listando todos los Resource Groups restantes..."
          aws resource-groups list-groups

      - name: Terraform Destroy
        working-directory: terraform
        run: |
          # Crear directorio lambda si no existe
          mkdir -p ../lambda
          
          # Crear un archivo Python simple para que no falle el deploy
          echo 'def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
          ' > ../lambda/lambda_function.py
          
          # Ejecutar terraform destroy
          terraform destroy -auto-approve || true
          
          # Aunque falle terraform destroy, intentar eliminar el resource group manualmente
          echo "Intentando eliminar el resource group directamente..."
          
          # Obtener ARN del Resource Group
          RESOURCE_GROUP_ARN=$(aws resource-groups list-groups --query "GroupIdentifiers[?Name=='car-wizard-resources'].GroupArn" --output text)
          
          if [ ! -z "$RESOURCE_GROUP_ARN" ] && [ "$RESOURCE_GROUP_ARN" != "None" ]; then
            echo "Resource Group encontrado: $RESOURCE_GROUP_ARN"
            echo "Eliminando mediante la consola AWS..."
            aws resource-groups delete-group --group-name "car-wizard-resources" --force || true
            
            echo "Esperando 10 segundos..."
            sleep 10
            
            # Verificar si se eliminó
            if aws resource-groups list-groups --query "GroupIdentifiers[?Name=='car-wizard-resources'].GroupArn" --output text | grep -q "car-wizard-resources"; then
              echo "⚠️ No se pudo eliminar el Resource Group automáticamente."
              echo "Por favor, intenta eliminarlo manualmente desde la consola AWS:"
              echo "1. Ve a https://console.aws.amazon.com/resource-groups/"
              echo "2. Selecciona 'car-wizard-resources'"
              echo "3. Haz clic en 'Actions > Delete'"
            else
              echo "✅ Resource Group eliminado con éxito"
            fi
          else
            echo "No se encontró el Resource Group 'car-wizard-resources'"
          fi
        env:
          TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}